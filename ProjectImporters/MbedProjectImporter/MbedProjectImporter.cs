using BSPEngine;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using static BSPEngine.ImportedExternalProject;

namespace MbedProjectImporter
{
    public class MbedProjectImporter : IExternalProjectImporter
    {
        public string UniqueID => "com.sysprogs.project_importers.mbed";

        public string Name => "Mbed";

        public string ImportCommandText => "Import a Makefile generated by mbed";

        public string ProjectFileFilter => "Makefile|Makefile";

        public string HelpText => null;

        public string HelpURL => null;

        public object SettingsControl => null;

        public object Settings { get; set; }

        public ImportedExternalProject ImportProject(ProjectImportParameters parameters, IProjectImportService service)
        {
            Regex rgLine = new Regex("(PROJECT|OBJECTS|INCLUDE_PATHS|LIBRARY_PATHS|LIBRARIES|LINKER_SCRIPT|C_FLAGS|CXX_FLAGS|ASM_FLAGS|LD_FLAGS|LD_SYS_LIBS|CC)[ \t]*(:=|\\+=|=|\\?=|=)[ \t]*(.*)$");
            string projectName = null;
            string baseDir = Path.GetDirectoryName(parameters.ProjectFile);

            ConstructedVirtualDirectory rootDir = new ConstructedVirtualDirectory();
            ConstructedProjectBuildSettings settings = new ConstructedProjectBuildSettings();


            foreach (var line in File.ReadAllLines(parameters.ProjectFile))
            {
                var m = rgLine.Match(line);
                if (!m.Success)
                    continue;

                string value = m.Groups[3].Value.Trim();
                if (value == "")
                    continue;


                switch(m.Groups[1].Value)
                {
                    case "PROJECT":
                        projectName = value;
                        break;
                    case "OBJECTS":
                        string relPath = value;
                        if (relPath.StartsWith("./"))
                            relPath = relPath.Substring(2);
                        string fullPath = Path.GetFullPath(Path.Combine(baseDir, relPath));
                        foreach(var extension in new[] { ".c", ".cpp", ".s"})
                        {
                            string source = Path.ChangeExtension(fullPath, extension);
                            if (File.Exists(source))
                            {
                                ImportedExternalProject.ConstructedVirtualDirectory subdir = rootDir;
                                if (relPath.Contains('/'))
                                    subdir = rootDir.ProvideSudirectory(Path.GetDirectoryName(relPath));
                                subdir.AddFile(source, false).ObjectFilePath = relPath;
                            }
                        }
                        break;
                    case "INCLUDE_PATHS":
                        ProcessPath(service, settings.IncludeDirectories, "-I../", "include path", value, baseDir);
                        break;
                    case "LIBRARY_PATHS":
                        ProcessPath(service, settings.LibraryDirectories, "-L../", "library path", value, baseDir);
                        break;
                    case "LIBRARIES":
                        settings.ExtraLDFLAGS.Add(value);
                        break;
                    case "LINKER_SCRIPT":
                        if (!value.StartsWith("../"))
                            service.Logger.LogLine("Warning: unsupported linker script: " + value);
                        else
                            settings.LinkerScript = Path.GetFullPath(Path.Combine(baseDir, value.Substring(3)));
                        break;
                    case "C_FLAGS":
                        if (value.StartsWith("-std="))
                            settings.CStandard = value.Substring(5);
                        break;
                    case "CXX_FLAGS":
                        if (value.StartsWith("-std="))
                            settings.CXXStandard = value.Substring(5);
                        else if (value == "-fno-rtti" || value == "-fno-exceptions")
                            continue;
                        else if (value.StartsWith("-D"))
                            settings.PreprocessorMacros.Add(value.Substring(2));
                        else
                            settings.ExtraCFLAGS.Add(value);
                        break;
                    case "LD_FLAGS":
                        settings.ExtraLDFLAGS.Add(value);
                        break;
                    case "LD_SYS_LIBS":
                        foreach (var lib in value.Split(' '))
                            if (lib.StartsWith("-l"))
                                settings.LibraryNames.Add(lib.Substring(2));
                        break;
                    case "CC":
                        int skip = 0;
                        foreach(var flag in value.Split(' ').Select(f=>f.Trim('\'')).Skip(1))
                        {
                            if (skip > 0)
                            {
                                skip--;
                                continue;
                            }
                            if (flag.StartsWith("-std") || flag.StartsWith("-g") || flag.StartsWith("-O"))
                                continue;

                            switch(flag)
                            {
                                case "-c":
                                case "-ffunction-sections":
                                case "-fdata-sections":
                                    continue;
                            }

                            settings.ExtraCFLAGS.Add(flag);
                        }
                        break;
                }
            }

            return new ImportedExternalProject
            {
                OriginalProjectFile = parameters.ProjectFile,
                ProjectName = projectName,
                GNUTargetID = "arm-eabi",
                Configurations = new []
                {
                    new ImportedConfiguration
                    {
                        Settings = settings.ToProjectBuildSettings()
                    }
                },
                RootDirectory = rootDir,
                ReferencedFrameworks = new string[0]
            };
        }

        private void ProcessPath(IProjectImportService service, List<string> list, string prefix, string name, string value, string baseDir)
        {
            if (!value.StartsWith("-I../"))
                service.Logger.LogLine($"Warning: unsupported {name}: {value}");
            else
            {
                string relPath = value.Substring(5);
                if (relPath == "")
                    return;
                list.Add(Path.GetFullPath(Path.Combine(baseDir, relPath)));
            }
        }
    }
}
